/*Usecase 1 requirements

NSP Product Family Map
*******************************
Create a  Map for Product family : "key being family name","values being list of node types"

for eg : SR family : 7750,7450,7950

tasks to perform :

1. Print family -> nodes
2. Add new Family IPEdge
3. Check if a family contains a node and add if it doesn't (eg if 7250 is present SR or not )
4. Delete if a node is depricated*/

package main

import "fmt"

func main() {
	// Create a map for product families and their corresponding node types
	productFamilies := map[string][]string{
		"SR family": {"7750", "7450", "7950", "7710"},
		"IPEdge":    {},
	}

	// Print family -> nodes
	for family, nodes := range productFamilies {
		fmt.Printf("%s -> %v\n", family, nodes)
	}

	// Add new Family IPEdge
	productFamilies["IPEdge"] = []string{"7210", "7705-SAR", "7705-Hm"}

	// Check if a family contains a node and add if it doesn't
	if _, ok := productFamilies["SR family"]; ok {
		if !contains(productFamilies["SR family"], "7250") {
			productFamilies["SR family"] = append(productFamilies["SR family"], "7250")
		}
	}

	// Delete if a node is deprecated
	if contains(productFamilies["SR family"], "7710") {
		productFamilies["SR family"] = remove(productFamilies["SR family"], "7710")
	}

	// Print updated family -> nodes
	fmt.Println("Updated family -> nodes:")
	for family, nodes := range productFamilies {
		fmt.Printf("%s -> %v\n", family, nodes)
	}
}

// function to check if a slice contains a string
func contains(slice []string, str string) bool {
	for _, s := range slice {
		if s == str {
			return true
		}
	}
	return false
}

// function to remove a string from a slice
func remove(slice []string, str string) []string {
	for i, s := range slice {
		if s == str {
			return append(slice[:i], slice[i+1:]...)
		}
	}
	return slice
}
